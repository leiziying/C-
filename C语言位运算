# C-
位运算是C语言学习中的难点，这里是一些位运算的实例。
将一个数的二进制从左到右翻转并输出这个值
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#define COL 20
unsigned int reverse_bit(unsigned int value)
{
	int sum = 0;
	int i = 0;
	for (i = 0; i < 32; i++)
	{
		sum += ((value >> (31 - i)) & 1) << i;
	}
	return sum;
}
int main()
{
	unsigned int n = 0;
	scanf("%d", &n);
	printf("%d",reverse_bit(n));
	system("pause");
	return 0;

}
一组数据中只有一个数字出现了一次
#define _CRT_SECURE_NO_WARNINGS 1
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
  int fun( int   *arr,int k)
  {
	  int i = 0;
	  int tmp = 0;
	  while (i<k)
	  {
		  tmp = tmp ^arr[i];//0异或任何数得任何数，相同数异或等于0
		  i++;
	  }
	  return tmp;
  }

int main()
{
	int arr[5] = { 1, 5, 4, 1, 5 };
	printf("%d", fun(arr, 5));
	system("pause");
	return 0;
}
不用（a+b）/2计算a和b的平均值
法一：
#define _CRT_SECURE_NO_WARNINGS 1
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int fun(int a, int b)
{
	return (a&b) + ((a^b)>>1);//a和b相同的部分加上不同的部分除以二，就是a和b的平均数
}
int main()
{
	int a = 4;
	int b = 12;
	scanf("%d%d", &a, &b);
	printf("%d", fun(a, b));
	system("pause");
	return 0;
}
法二：
#define _CRT_SECURE_NO_WARNINGS 1
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int fun(int a, int b)
{
	int avg = 0;
	avg = a + (b - a) / 2;
	return avg;
}
	
int main()
{
	int a = 4;
	int b = 12;
	scanf("%d%d", &a, &b);
	printf("%d", fun(a, b));
	system("pause");
	return 0;
}


 逆置 student  a  am  i --->i  am  a  student
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
   void fun1(char *left, char *right)//逆置
{
	char tmp = 0;
	while (left<right)
	{
		tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}
  int fun2(char *arr)//计算字符串长度
{
	int count = 0;
	while (*arr != '\0')
	{
		count++;
		arr++;
	}
	return count;
}
void fun3(char *arr)
{
	char *left = arr;
	char *right = arr + fun2(arr) - 1;
	char *p = arr;
	fun1(left, right);
	while (*p != '\0')
	{
		char *start = p;
		while (*p != ' '&&*p != '\0')
		{
			p++;
		}
		fun1(start, p - 1);
		if (*p == ' ')
		{
			p++;
		}
	}
}

int main()
{
	char arr[] = "student a am i";
	fun3(arr);
	printf("%s\n", arr); 
	system("pause");
	return 0;
} 
写一个函数返回参数二进制中1的个数
 法一：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
int count_one_bits(unsigned int n)
{
	
	int count = 0;
	while (n != 0)
	{
		n = n&(n - 1);//用n和（n-1）按位与,每一次的值再给n,计算n的二进制位1的个数
		count++;//每次按位与之后count自增
	}
	return count;//返回count的值
}
int main()
{
unsigned	int n = 0;//无符号整形
	scanf("%d", &n);
	printf("%d", count_one_bits(n));
	system("pause");
}
法二：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
int  count_one_bits1(unsigned int n)//不加unsigned就不能算负数,因为负数右移左边补1
{
	int count = 0;
	while (n != 0)
	{
		if (n % 2 == 1)
		{
			count++;
		}
		n=n >> 1;
	}
	return count;
}
int main()
{
	int n = 0;
	scanf("%d", &n);
	printf("%d", count_one_bits1(n));
	system("pause");
}
法三:
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
int  count_one_bits2( int n)
{
	int count = 0;
	int i = 0;
	for (i = 0; i < 32; i++)//控制循环次数
	{
		if (((n >> i) & 1) == 1)//判断n右移i位后和1与的值是否为1
		{
			count++;
		}
	}
	return count;
}
int main()
{
	int n = 0;
	scanf("%d", &n);
	printf("%d", count_one_bits2(n));
	system("pause");
}
获取一个数二进制序列中所有的偶数位和奇数位
分别输出二进制序列
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
int fun(int n)
{
	int i = 0;
	printf("偶数位：");
	for (i = 31; i >0; i-=2)//从右边第一位算奇数位，则从1——31为偶数位
	{
		printf("%d", (n >> i) & 1);//让n右移i位和1相与，有0得0，有1得1，得到每一位的值
	}
	printf("\n奇数位：");
	for (i = 30; i >= 0; i-=2)//从0——30为奇数位
	{
		printf("%d", (n >> i) & 1);
	}
}
int main()
{
	int n = 0;
	scanf("%d", &n);
	fun(n);
	system("pause");
	return 0;
}
